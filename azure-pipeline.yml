trigger:
  branches:
    include:
      - main

variables:
  azureServiceConnection: 'Azure-Yousma-Connection'        # Your service connection name in Azure DevOps
  dockerRegistryServiceConnection: 'acr-connection'         # ACR service connection
  acrName: 'contactsaveracr123'
  containerImage: 'contact-saver'
  dockerfilePath: 'backend/Dockerfile'
  tfBackendRg: 'yousma-rg'
  tfStorage: 'yousmastorage'
  tfContainer: 'tfstate'
  tfKey: 'terraform.tfstate'

stages:

# -------------------- STAGE 1: Build & Push Docker Image --------------------
- stage: Build
  displayName: 'Build and Push Docker Image'
  jobs:
    - job: BuildImage
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self

        - task: Docker@2
          displayName: 'Build and Push to ACR'
          inputs:
            containerRegistry: $(dockerRegistryServiceConnection)
            repository: $(containerImage)
            command: buildAndPush
            Dockerfile: $(dockerfilePath)
            tags: |
              latest

# -------------------- STAGE 2: Deploy Terraform Infrastructure --------------------
- stage: Deploy
  displayName: 'Terraform Deploy Infra + Web App'
  dependsOn: Build
  jobs:
    - job: Terraform
      pool:
        vmImage: ubuntu-latest
      steps:
        - checkout: self

        - task: TerraformInstaller@0
          displayName: 'Install Terraform'
          inputs:
            terraformVersion: '1.7.5'

        # Terraform Init with proper backend configuration
        - task: TerraformTaskV1@0
          displayName: 'Terraform Init'
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: 'terraform'
            backendServiceArm: $(azureServiceConnection)
            backendAzureRmResourceGroupName: $(tfBackendRg)
            backendAzureRmStorageAccountName: $(tfStorage)
            backendAzureRmContainerName: $(tfContainer)
            backendAzureRmKey: $(tfKey)

        # Get ACR credentials
        - task: AzureCLI@2
          displayName: 'Get ACR Credentials'
          inputs:
            azureSubscription: $(azureServiceConnection)
            scriptType: 'bash'
            scriptLocation: 'inlineScript'
            inlineScript: |
              ACR_USERNAME=$(az acr credential show --name $(acrName) --query "username" --output tsv)
              ACR_PASSWORD=$(az acr credential show --name $(acrName) --query "passwords[0].value" --output tsv)
              echo "##vso[task.setvariable variable=ACR_USERNAME]$ACR_USERNAME"
              echo "##vso[task.setvariable variable=ACR_PASSWORD]$ACR_PASSWORD"

        - task: TerraformTaskV1@0
          displayName: 'Terraform Plan'
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: 'terraform'
            environmentServiceNameAzureRM: $(azureServiceConnection)
            commandOptions: '-var="resource_group_name=$(tfBackendRg)" -var="location=East US" -var="acr_name=$(acrName)" -var="app_service_plan_name=contact-asp" -var="web_app_name=contact-webapp-123" -var="key_vault_name=contactkv123" -var="email_api_key=sample-api-key" -var="acr_admin_username=$(ACR_USERNAME)" -var="acr_admin_password=$(ACR_PASSWORD)" -var="container_image=$(containerImage)"'

        - task: TerraformTaskV1@0
          displayName: 'Terraform Apply'
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: 'terraform'
            environmentServiceNameAzureRM: $(azureServiceConnection)
            commandOptions: '-var="resource_group_name=$(tfBackendRg)" -var="location=East US" -var="acr_name=$(acrName)" -var="app_service_plan_name=contact-asp" -var="web_app_name=contact-webapp-123" -var="key_vault_name=contactkv123" -var="email_api_key=sample-api-key" -var="acr_admin_username=$(ACR_USERNAME)" -var="acr_admin_password=$(ACR_PASSWORD)" -var="container_image=$(containerImage)" -auto-approve'
