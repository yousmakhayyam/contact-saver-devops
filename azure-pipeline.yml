trigger:
  branches:
    include:
      - main

variables:
- group: Azurecredentials   
- name: azureSubscription
  value: 'Azure-Yousma-Connection'
- name: acrName
  value: 'myprojectacr1234'
- name: acrLoginServer
  value: 'myprojectacr1234.azurecr.io'
- name: imageName
  value: 'moodly'

stages:
# -------------------------------
# Stage 1: Create RG + ACR
# -------------------------------
- stage: Create_ACR
  displayName: 'Terraform Apply - Create RG + ACR'
  jobs:
  - job: TF_ACR
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: terraform
        backendServiceArm: $(azureSubscription)
        backendAzureRmResourceGroupName: yousma-rg
        backendAzureRmStorageAccountName: yousmastorage
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
        environmentServiceNameAzureRM: $(azureSubscription)

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply - Only RG + ACR'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: terraform
        environmentServiceNameAzureRM: $(azureSubscription)
        commandOptions: >
          -target=azurerm_resource_group.rg
          -target=azurerm_container_registry.acr
          -auto-approve

# --------------------------------
# Stage 2: Build & push image
# --------------------------------
- stage: Build_Push
  displayName: 'Build & Push Docker Image'
  dependsOn: Create_ACR
  jobs:
  - job: BuildPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Login to ACR & Push Image'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          ACR_NAME="$(acrName)"
          echo "Using ACR: $ACR_NAME"
          az acr login --name "$ACR_NAME"

          IMAGE="$(acrLoginServer)/$(imageName):$(Build.BuildId)"
          LATEST_IMAGE="$(acrLoginServer)/$(imageName):latest"
          echo "Building images..."
          docker build -t "$IMAGE" -t "$LATEST_IMAGE" backend
          echo "Pushing images to ACR..."
          docker push "$IMAGE"
          docker push "$LATEST_IMAGE"
          echo "##vso[task.setvariable variable=IMAGE_URI]$IMAGE"

    - task: AzureCLI@2
      displayName: 'Verify Image in ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr repository list --name $(acrName) --output table
          az acr repository show-tags --name $(acrName) --repository $(imageName) --output table

# --------------------------------
# Stage 3: Deploy infra + app
# --------------------------------
- stage: Deploy_App
  displayName: 'Terraform Apply - Infra & App'
  dependsOn: Build_Push
  variables:
    image_tag: latest

  jobs:
  - job: TF_App
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: terraform
        backendServiceArm: $(azureSubscription)
        backendAzureRmResourceGroupName: yousma-rg
        backendAzureRmStorageAccountName: yousmastorage
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
        environmentServiceNameAzureRM: $(azureSubscription)

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply - All Remaining Infra + App'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform'
        environmentServiceNameAzureRM: $(azureSubscription)
        commandOptions: '-auto-approve -var="image_tag=$(image_tag)"'
