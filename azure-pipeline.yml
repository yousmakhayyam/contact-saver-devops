trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'Azure-Yousma-Connection'     # ‚úÖ ARM service connection name
  containerRegistry: 'acr-connection1'             # ‚úÖ Docker registry service connection to ACR
  acrLoginServer: 'myprojectacr1234.azurecr.io'
  imageName: 'myapp'

stages:
# -----------------------------------------------
# üîπ CI Stage: Build and Push Docker Image to ACR
# -----------------------------------------------
- stage: CI
  displayName: 'Build and Push Docker Image'
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - script: |
        echo "üê≥ Debug Docker Info"
        docker version
        docker context ls
      displayName: 'Show Docker Info'

    - task: Docker@2
      displayName: 'Build and Push Docker Image to ACR'
      inputs:
        command: 'buildAndPush'
        containerRegistry: '$(containerRegistry)'
        repository: '$(imageName)'
        dockerfile: 'backend/Dockerfile'
        buildContext: 'backend'
        tags: |
          latest

# --------------------------------------------------------
# üîπ CD Stage: Deploy Infrastructure and App via Terraform
# --------------------------------------------------------
- stage: CD
  displayName: 'Deploy Infra & App via Terraform'
  dependsOn: CI
  jobs:
  - job: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    # ‚úÖ Install Terraform
    - task: TerraformInstaller@1
      displayName: 'Install Terraform 1.6.6'
      inputs:
        terraformVersion: '1.6.6'

    - script: terraform version
      displayName: 'Show Terraform Version'
      workingDirectory: 'terraform'

    # ‚úÖ Terraform Init
    - task: TerraformTaskV4@4
      name: TerraformInit
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: 'terraform'
        backendServiceArm: '$(azureSubscription)'
        backendAzureRmResourceGroupName: 'yousma-rg'
        backendAzureRmStorageAccountName: 'yousmastorage'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'terraform.tfstate'
        environmentServiceNameAzureRM: '$(azureSubscription)'
        commandOptions: '-upgrade'

    # ‚úÖ Terraform Apply - Infra Only
    - task: TerraformTaskV4@4
      name: TerraformApplyInfra
      displayName: 'Terraform Apply - Infra Only'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform'
        environmentServiceNameAzureRM: '$(azureSubscription)'
        commandOptions: >
          -target=azurerm_resource_group.rg
          -target=azurerm_container_registry.acr
          -target=azurerm_user_assigned_identity.acr_pull_identity
          -target=azurerm_role_assignment.acr_pull_role
          -target=azurerm_container_app_environment.env
          -auto-approve

    # ‚è≥ Wait for Docker image to be pushed and ACR to sync
    - script: |
        echo "‚è≥ Waiting for 60 seconds to ensure image is available in ACR..."
        sleep 60
      displayName: 'Wait for Docker Image Availability'

    # ‚úÖ Terraform Apply - Container App Only
    - task: TerraformTaskV4@4
      name: TerraformApplyApp
      displayName: 'Terraform Apply - Container App'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform'
        environmentServiceNameAzureRM: '$(azureSubscription)'
        commandOptions: >
          -target=azurerm_container_app.app
          -auto-approve

    # ‚úÖ VERIFY IMAGE AFTER ACR EXISTS
    - task: AzureCLI@2
      displayName: 'Verify Docker Image Pushed to ACR'
      inputs:
        azureSubscription: '$(azureSubscription)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "üîç Checking if image exists in ACR..."
          az acr repository show-tags --name myprojectacr1234 --repository myapp --output table
