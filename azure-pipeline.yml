trigger:
  branches:
    include:
      - main

variables:
  azureSubscription: 'Azure-Yousma-Connection'      #  RM service connection name
  acrLoginServer: 'myprojectacr1234.azurecr.io'
  imageName: 'moodly'
  imageTag: 'latest'
  
stages:
  # ----------------------------------------------
  # 🔹 CI Stage: Build Docker Image
  # -----------------------------------------------
  - stage: CI
    displayName: 'Build Docker Image'
    jobs:
      - job: Build
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          - script: |
              echo "🐳 Docker Diagnostics"
              docker version
              docker info
            displayName: 'Docker Info'
            
          # ✅ Build the Docker image
          - task: Docker@2
            displayName: 'Build Docker Image'
            inputs:
              command: build
              containerRegistry: ''
              repository: $(imageName)
              dockerfile: backend/Dockerfile
              buildContext: backend
              tags: $(imageTag)
              
          # ✅ Save the Docker image to a tar file
          - script: |
              docker save -o $(Build.ArtifactStagingDirectory)/$(imageName).tar $(imageName):$(imageTag)
            displayName: 'Save Docker Image to Tar'
            
          # ✅ Publish the tar file as a pipeline artifact
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Docker Image Artifact'
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)
              artifact: 'docker-image'

  # --------------------------------------------------------
  # 🔹 CD Stage: Deploy Infra, then Push Image and Deploy App
  # --------------------------------------------------------
  - stage: CD
    displayName: 'Deploy Infra, Push Image & Deploy App'
    dependsOn: CI
    jobs:
      - job: Deploy
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          - checkout: self

          # ✅ Download the Docker image tar file from the CI stage
          - task: DownloadPipelineArtifact@2
            displayName: 'Download Docker Image Artifact'
            inputs:
              artifact: 'docker-image'
              path: $(Build.ArtifactStagingDirectory)

          # ✅ Load the Docker image from the tar file
          - script: |
              docker load -i $(Build.ArtifactStagingDirectory)/$(imageName).tar
            displayName: 'Load Docker Image from Tar'

          # ✅ Install Terraform and run Init/Apply for infrastructure
          - task: TerraformInstaller@1
            displayName: 'Install Terraform 1.6.6'
            inputs:
              terraformVersion: '1.6.6'

          - task: TerraformTaskV4@4
            name: TerraformInit
            displayName: 'Terraform Init'
            inputs:
              provider: 'azurerm'
              command: init
              workingDirectory: terraform
              backendServiceArm: $(azureSubscription)
              backendAzureRmResourceGroupName: yousma-rg
              backendAzureRmStorageAccountName: yousmastorage
              backendAzureRmContainerName: tfstate
              backendAzureRmKey: terraform.tfstate
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: -upgrade

          - task: TerraformTaskV4@4
            name: TerraformApplyInfra
            displayName: 'Terraform Apply - Infra Only (creates ACR)'
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: >
                -target=azurerm_container_registry.acr
                -var="email_api_key=$(EMAIL_API_KEY)"
                -auto-approve

          # ✅ Login to the newly created ACR
          - task: AzureCLI@2
            displayName: 'Docker Login to ACR'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                az acr login --name myprojectacr1234
                
          # ✅ Tag the image with the full ACR path before pushing
          - script: |
              docker tag $(imageName):$(imageTag) $(acrLoginServer)/$(imageName):$(imageTag)
            displayName: 'Tag Docker Image for ACR'

          # ✅ Push the Docker image to the new ACR
          - task: Docker@2
            displayName: 'Push Docker Image to ACR'
            inputs:
              command: push
              containerRegistry: ''
              repository: $(acrLoginServer)/$(imageName)
              tags: $(imageTag)
              
          # ✅ Continue with the rest of your deployment steps
          - task: TerraformTaskV4@4
            displayName: 'Terraform Apply - All remaining resources'
            inputs:
              provider: azurerm
              command: apply
              workingDirectory: terraform
              environmentServiceNameAzureRM: $(azureSubscription)
              commandOptions: -auto-approve

          - task: AzureCLI@2
            displayName: 'Show Terraform output (app_url)'
            inputs:
              azureSubscription: $(azureSubscription)
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                echo "Terraform outputs:"
                terraform -chdir=terraform output || true