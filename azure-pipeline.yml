trigger:
  branches:
    include:
      - main

variables:
- group: Azurecredentials  
- name: azureSubscription
  value: 'Azure-Yousma-Connection'
- name: acrName
  value: 'myprojectacr1234'
- name: acrLoginServer
  value: 'myprojectacr1234.azurecr.io'
- name: imageName
  value: 'moodly'

stages:
# -------------------------------
# Stage 1: Create RG + ACR (safe)
# --------------------------------
- stage: Create_ACR
  displayName: 'Terraform Apply - Create RG + ACR (safe)'
  jobs:
  - job: TF_ACR
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: terraform
        backendServiceArm: $(azureSubscription)
        backendAzureRmResourceGroupName: yousma-rg
        backendAzureRmStorageAccountName: yousmastorage
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
        environmentServiceNameAzureRM: $(azureSubscription)

    - task: AzureCLI@2
      displayName: 'Ensure no stale Terraform lock blob (try delete)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          echo "Attempting to delete stale terraform lock blob (if present)..."
          az storage blob delete \
            --account-name yousmastorage \
            --container-name tfstate \
            --name "terraform.tfstate.lock.info" \
            --auth-mode login \
            --only-show-errors || true
          echo "Done (delete attempt finished)."

    - task: AzureCLI@2
      displayName: 'Ensure RG state is safe (inspect/import existing RG)'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          cd terraform
          DESIRED_RG="yousma-khayam-rg"
          STATE_RESOURCE="azurerm_resource_group.rg"

          echo "Checking Terraform state for ${STATE_RESOURCE}..."
          if terraform state list 2>/dev/null | grep -q "^${STATE_RESOURCE}$"; then
            echo "Found ${STATE_RESOURCE} in state. Inspecting existing name..."
            current_name=$(terraform state show ${STATE_RESOURCE} 2>/dev/null | sed -n 's/^ *name *= *"\(.*\)".*/\1/p' || echo "")
            echo "Current name in state: '${current_name}'"
            if [ "${current_name}" != "${DESIRED_RG}" ]; then
              echo "State entry has different name -> removing state entry to avoid replacement"
              terraform state rm ${STATE_RESOURCE} || true

              echo "Checking if resource group '${DESIRED_RG}' already exists in subscription..."
              if az group show -n "${DESIRED_RG}" >/dev/null 2>&1; then
                echo "Resource group ${DESIRED_RG} exists — importing into Terraform state..."
                SUBSCRIPTION_ID=$(az account show --query id -o tsv)
                terraform import ${STATE_RESOURCE} /subscriptions/${SUBSCRIPTION_ID}/resourceGroups/${DESIRED_RG}
                echo "Import successful."
              else
                echo "Resource group ${DESIRED_RG} does not exist — Terraform will create it."
              fi
            else
              echo "State entry matches desired name. No action needed."
            fi
          else
            echo "${STATE_RESOURCE} not present in state — safe to apply to create it."
          fi

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply - Only RG + ACR'
      inputs:
        provider: 'azurerm'
        command: apply
        workingDirectory: terraform
        environmentServiceNameAzureRM: $(azureSubscription)
        commandOptions: >
          -target=azurerm_resource_group.rg
          -target=azurerm_container_registry.acr
          -auto-approve
          -var="db_password=dummypass"

    - script: |
        echo "Waiting 20s for ACR readiness propagation..."
        sleep 20
      displayName: 'Wait for ACR readiness'

    # NEW STEP — Store ACR credentials in Azure Key Vault
    - task: AzureCLI@2
      displayName: 'Store ACR credentials in Key Vault'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Fetching ACR credentials..."
          ACR_USER=$(az acr credential show --name $(acrName) --query "username" -o tsv)
          ACR_PASS=$(az acr credential show --name $(acrName) --query "passwords[0].value" -o tsv)

          echo "Storing in Key Vault..."
          az keyvault secret set --vault-name yousma-keyvault --name "acr-username" --value "$ACR_USER"
          az keyvault secret set --vault-name yousma-keyvault --name "acr-password" --value "$ACR_PASS"
          az keyvault secret set --vault-name yousma-keyvault --name "acr-login-server" --value "$(acrLoginServer)"

          echo "✅ ACR credentials stored in Key Vault successfully."

# --------------------------------
# Stage 2: Build & push image
# --------------------------------
- stage: Build_Push
  displayName: 'Build & Push Docker Image'
  dependsOn: Create_ACR
  jobs:
  - job: BuildPush
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Login to ACR & Push Image'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euo pipefail
          ACR_NAME="$(acrName)"
          echo "Using ACR: $ACR_NAME"
          az acr login --name "$ACR_NAME"

          IMAGE="$(acrLoginServer)/$(imageName):$(Build.BuildId)"
          echo "Building $IMAGE"
          docker build -t "$IMAGE" backend
          docker push "$IMAGE"
          echo "##vso[task.setvariable variable=IMAGE_URI]$IMAGE"

    - task: AzureCLI@2
      displayName: 'Verify Image in ACR'
      inputs:
        azureSubscription: $(azureSubscription)
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az acr repository list --name $(acrName) --output table
          az acr repository show-tags --name $(acrName) --repository $(imageName) --output table

# --------------------------------
# Stage 3: Deploy infra + app
# --------------------------------
- stage: Deploy_App
  displayName: 'Terraform Apply - Infra & App'
  dependsOn: Build_Push
  variables:
    image_tag: $(Build.BuildId)

  jobs:
  - job: TF_App
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: self

    - task: TerraformInstaller@1
      inputs:
        terraformVersion: '1.6.6'

    - task: TerraformTaskV4@4
      displayName: 'Terraform Init'
      inputs:
        provider: 'azurerm'
        command: init
        workingDirectory: terraform
        backendServiceArm: $(azureSubscription)
        backendAzureRmResourceGroupName: yousma-rg
        backendAzureRmStorageAccountName: yousmastorage
        backendAzureRmContainerName: tfstate
        backendAzureRmKey: terraform.tfstate
        environmentServiceNameAzureRM: $(azureSubscription)

    - task: TerraformTaskV4@4
      displayName: 'Terraform Apply - All Remaining Infra + App'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: 'terraform'
        environmentServiceNameAzureRM: $(azureSubscription)
        commandOptions: '-auto-approve -var="image_tag=$(image_tag)" -var="db_password=$(DB_PASSWORD)"'
